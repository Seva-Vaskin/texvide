global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

context "math()"
snippet >= "ge" Ai
\ge
endsnippet

context "math()"
snippet <= "le" Ai
\le
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 100
context "math()"
snippet != "not equals" iA
\neq 
endsnippet

context "math()"
snippet = "longequal" i
`!p 
if not t[1] or len(t[1]) <= 3:
    snip.rv = r'\overset{'
else:
    snip.rv = r'\xlongequal{'
`$1`!p
if not t[1] or len(t[1]) <= 3:
    snip.rv = '}{=}'
else:
    snip.rv = '}'
`$0
endsnippet


context "math()"
snippet := "coloneqq" iA
\coloneqq
endsnippet

context "math()"
snippet =: "eqqcolon" iA
\eqqcolon
endsnippet

context "math()"
snippet EE "exist" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xx "cross" wA
\times
endsnippet

priority 100
snippet ** "cdot" iA
\cdot
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet x-> "xrightarrow" iA
\xrightarrow[$1]{$2}$0
endsnippet

priority 200
context "math()"
snippet xto "xrightarrow" iA
\xrightarrow[$1]{$2}$0
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 200
context "math()"
snippet x=> "xRightarrow" iA
\xRightarrow[$1]{$2}$0
endsnippet

context "math()"
snippet ~> "leadsto" iA
\\leadsto
endsnippet

context "math()"
snippet || "mid" iA
\\mid 
endsnippet

context "math()"
snippet :: "colon" iA
 \colon 
endsnippet

context "math()"
snippet cc "subset" wA
\subset 
endsnippet

context "math()"
snippet c= "subseteq" wA
\subseteq 
endsnippet

priority 200
context "math()"
snippet c!= "subsetneq" wA
\subsetneq 
endsnippet


context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

priority 100
context "math()"
snippet inn "in " wA
\in 
endsnippet

context "math()"
snippet OO "emptyset" iA
\varnothing
endsnippet

context "math()"
snippet ddx "d/dx" wA
\\frac{\partial $1}{\partial $2}$0
endsnippet

context "math()"
snippet o+ "oplus" wA
\\oplus
endsnippet

context "math()"
snippet o- "ominus" wA
\\ominus
endsnippet

context "math()"
snippet +- "+-" iA
\\pm
endsnippet

context "math()"
snippet -+ "-+" iA
\\mp
endsnippet

priority 200
context "math()"
snippet tinf "to infinity" iA
\\to \\infty
endsnippet

context "math()"
snippet cnk "binomial coefficient" iA
\\binom{ $1 }{ $2 }$0
endsnippet

context "math()"
snippet u+ "uplis" wA
\\uplus
endsnippet

context "math()"
snippet U+ "uplis" wA
\\biguplus
endsnippet