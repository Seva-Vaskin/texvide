global !p
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

context "env('algorithmic')"
snippet proc "procedure" bA
\Procedure{$1}{$2}
    $3
\EndProcedure $0
endsnippet

context "env('algorithmic')"
snippet st "state" bA
\State
endsnippet

context "env('algorithmic')"
snippet ret "return" bA
\State \textbf{return}
endsnippet

context "env('algorithmic')"
snippet for "for loop" bA
\For{$1}
    $2
\EndFor $0
endsnippet

context "env('algorithmic')"
snippet while "while loop" bA
\While{$1}
    $2
\EndWhile $0
endsnippet

context "env('algorithmic')"
snippet if "if statement" bA
\If{$1}
    $2
\EndIf $0
endsnippet

context "env('algorithmic')"
snippet ifelse "if-else statement" bA
\If{$1}
    $2
\Else
    $3
\EndIf $0
endsnippet

context "env('algorithmic')"
snippet repeat "repeat-until loop" bA
\Repeat
    $1
\Until{$2} $0
endsnippet

context "env('algorithmic')"
snippet assert "assert" bA
\State \textbf{assert} $1
endsnippet

context "env('algorithmic')"
snippet call "function call" bA
\State \Call{$1}{$2} $0
endsnippet

