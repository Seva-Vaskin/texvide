global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def notmath():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def double_letter_check(match):
	text = match.group(1) + match.group(2) * 2
	return text not in ["coloneqq",  "iff", "mathbb", "bigg", "forall", "vee", "bigvee"]

def get_inner_env():
	return vim.eval('vimtex#env#get_inner()').get('name', '')

def tabular_env():
	return get_inner_env() in ['pmatrix', 'cases', 'align', 'gather', 'bmatrix', 'Bmatrix', 'vmatrix', 'Vmatrix', 'array', 'matrix']

def newline_post_expand():
	prev_line = snip.buffer[snip.line - 1].strip()
	inner_env = get_inner_env()
	if prev_line.endswith(f"\\begin{{{inner_env}}}") or prev_line.endswith(f"\\begin{{{inner_env}*}}"):
		pass
	elif not prev_line.endswith(r'\\'):
		snip.buffer[snip.line - 1] += r'\\'

def auto_newline_env():
	if not tabular_env():
		return False
	prev_line = snip.buffer[snip.line - 1].strip()
	if prev_line.endswith(r'\\'):
		return False	
	inner_env = get_inner_env()
	begin_marks = [f"\\begin{{{inner_env}}}", f"\\begin{{{inner_env}*}}"]
	current_line = snip.buffer[snip.line]
	if any(map(lambda x: x in current_line, begin_marks)) \
		or any(map(lambda x: prev_line.endswith(x), begin_marks)):
		return False 
	return True
endglobal

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet "\\(bigcup|bigcap|bigwedge|bigvee|bigoplus|bigotimes|bigsqcup|bigsqcap|biguplus|sup|lim)" "expand" ir
\\`!p snip.rv = match.group(1)`_{$1}$0
endsnippet

context "math()"
snippet "\\(sum|prod|int)" "expand" ir
\\`!p snip.rv = match.group(1)`_{$1}^{$2}$0
endsnippet

context "math()"
snippet \to "expand ->" i
\xrightarrow[$1]{$2}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^
endsnippet

context "math()"
snippet sd "subscript" iA
_{$1}$0
endsnippet

priority 100
context "math()"
snippet inf "\infty" iA
\infty
endsnippet

context "math()"
snippet '(?<!\\)ast' "ast" riA
^{*}
endsnippet

priority -1
context "math() and double_letter_check(match)"
snippet '([A-Za-z]+)([A-Za-z])\2([^A-Za-z])' "Transform repeated letters to underscore" rA
`!p
snip.rv = match.group(1) + "_" + match.group(2) + match.group(3)
`
endsnippet

context "math() and double_letter_check(match)"
snippet '([A-Za-z]+)([A-Za-z])\2' "Transform repeated letters to underscore" r
`!p
snip.rv = match.group(1) + "_" + match.group(2)
`
endsnippet

context "math()"
snippet "\\([x|p|X|P])ii" "Enable back x_i, p_i, P_i, Pi_i" riA
`!p snip.rv = match.group(1)`_i
endsnippet

context "math()"
snippet "([x|p|X|P])_ii" "Enable back \xi_i, \pi_i, \Xi_i, \Pi_i" riA
\\`!p snip.rv = match.group(1)`i_i
endsnippet

context "math()"
snippet '([_^])([a-zA-Z])([+\-*/])(\d)' "Subscript and Exponent Operator and Number" rA
`!p snip.rv = match.group(1) + "{" + match.group(2) + " " + match.group(3) + " " + match.group(4) + "}"`
endsnippet

context "math()"
snippet "b([A-Z])" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet mrm "mathrm" iA
\mathrm{$1}$0
endsnippet

context "math()"
snippet mbf "mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet "c([A-Z])" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "f([A-Z])" "mathfrak" riA
\mathfrak{`!p snip.rv=match.group(1)`}
endsnippet

snippet ee "Emphasize" w
\\emph{${1:${VISUAL}}}
endsnippet

snippet tbf "textbf" wA
\textbf{$1}$0
endsnippet

snippet tit "textit" wA
\textit{$1}$0
endsnippet

snippet tsl "textsl" wA
\textsl{$1}$0
endsnippet

snippet tsc "textsc" wA
\textsc{$1}$0
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet abs "abs" iA
|${1:${VISUAL}}|$0
endsnippet

priority 100
context "math()"
snippet '\b(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "auto backslash" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '\b(?<!\\)(ge|le|iff|lor|land|lnot|supset|cap|cup|sqcup|cap|deg|mid|cdot|times|lim|arcsin|arccos|arctan|arccot|arccsc|arcsec|int|to|sum|prod|int|sim|sup|min|max)' "auto backslash" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet sqrt "sqrt" wA
\\sqrt{ ${1:${VISUAL}} }$0
endsnippet

snippet '(?<!\\)(hfill)' "hfill" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet sem "setminus" iA
\setminus
endsnippet

context "math()"
snippet ~~ "approx" iA
\approx
endsnippet

context "math()"
snippet == "equiv" iA
\equiv
endsnippet

context "math()"
snippet set "set" wA
\\{ $1 \\}$0
endsnippet

context "math()"
snippet zo "zero one" wA
\\{ 0, 1 \\}
endsnippet

context "math()"
snippet '\b(?<!\\)(Cap|Cup|Sqcup|Sqcap|Vee|Wedge)' "Big symbols" rwA
\\big`!p snip.rv = match.group(1).lower()`
endsnippet

context "math()"
snippet Lor "bigvee alias" wA
\\bigvee
endsnippet

context "math()"
snippet Land "bigwedge alias" wA
\\bigwedge
endsnippet

context "math()"
snippet tt "text" wA
\text{$1}$0
endsnippet

context "math()"
snippet cases "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

priority 10
context "math()"
snippet til "tilde" wA
\tilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])til" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet bar "bar" wA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet hat "hat" wA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "\b([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet Re "Re" iA
\mathrm{Re}
endsnippet

context "math()"
snippet Im "Im" iA
\mathrm{Im}
endsnippet

context "get_inner_env() in ['itemize', 'enumerate']"
snippet - "item" biA
\item
endsnippet

context "get_inner_env() == 'description'"
snippet - "item" biA
\item[$1] $0
endsnippet

context "tabular_env() and snip.buffer[snip.line][:snip.column].strip() != ''"
snippet "\t" "&" rA
 & 
endsnippet

context "auto_newline_env()"
post_expand "newline_post_expand()"
snippet "(\S)" "auto newline" rA
`!p
snip.rv = match.group(1)
`
endsnippet

context "env('align')"
snippet tag "tag" wA
\\tag{$1}$0
endsnippet

snippet TODO "todo" w
\todo[inline]{ $1 }$0
endsnippet

snippet todo "todo" w
\todo{ $1 }$0
endsnippet

