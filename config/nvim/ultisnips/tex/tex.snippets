global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def notmath():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

context "notmath()"
snippet '\$\s*-' "~-" rmA
\$~-
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

context "math()"
snippet >= "ge" Ai
\ge
endsnippet

context "math()"
snippet <= "le" Ai
\le
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet != "not equals" iA
\neq 
endsnippet

context "math()"
snippet == "longequal" iA
\\xlongequal{$1}$0
endsnippet

context "math()"
snippet := "coloneqq" iA
\coloneqq
endsnippet

context "math()"
snippet =: "eqqcolon" iA
\eqqcolon
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet ee "emph" w
\emph{$1} $0
endsnippet

context "math()"
snippet lr "left( right)" w
\\left${1:(} ${2:${VISUAL}} \\right${3:)} $0
endsnippet

context "math()"
snippet sum "sum" iA
\sum_{${1}}^{${2}} ${3}
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet '(?<!\\)ast' "ast" riA
^{\ast}
endsnippet

context "math()"
snippet EE "exist" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet '([A-Za-z]+)([A-Za-z])\2([^A-Za-z])' "Transform repeated letters to underscore" rmA
`!p
if match.group(1) in ["colone"]:
	snip.rv = match.group(1) + match.group(2) * 2 + match.group(3)
else:
	snip.rv = match.group(1) + "_" + match.group(2) + match.group(3)
`
endsnippet

context "math()"
snippet '([A-Za-z]+)(aa|bb|cc|dd|ee|ff|gg|hh|ii|jj|kk|ll|mm|nn|oo|pp|qq|rr|ss|tt|uu|vv|ww|xx|yy|zz|AA|BB|CC|DD|EE|FF|GG|HH|II|JJ|KK|LL|MM|NN|OO|PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ)' "Transform repeated letters to underscore" rm
`!p snip.rv = match.group(1) + "_" + match.group(2)[0]`
endsnippet

context "math()"
snippet '([_^])([a-zA-Z])([+\-*/])(\d)' "Subscript and Exponent Operator and Number" rA
`!p snip.rv = match.group(1) + "{" + match.group(2) + " " + match.group(3) + " " + match.group(4) + "}"`
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

context "math()"
snippet mbb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet "b([A-Z])" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet mbf "mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet "c([A-Z])" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "f([A-Z])" "mathfrak" riA
\mathfrak{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet mrm "mathrm" iA
\mathrm{$1}$0
endsnippet

snippet tbf "textbf" mA
\textbf{$1}$0
endsnippet

snippet tit "textit" mA
\textit{$1}$0
endsnippet

snippet tsl "textsl" mA
\textsl{$1}$0
endsnippet

snippet tsc "textsc" mA
\textsc{$1}$0
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet abs "abs" iA
|${1:${VISUAL}}|$0
endsnippet

priority 100
context "math()"
snippet '\b(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '\b(?<!\\)(iff|lor|land|supset|cap|cup|sqcup|deg|mid|cdot|times|lim|arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int|to)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet '(?<!\\)(hfill)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 200
context "math()"
snippet x-> "xrightarrow" iA
\xrightarrow[$1]{$2}$0
endsnippet

priority 200
context "math()"
snippet x=> "xRightarrow" iA
\xRightarrow[$1]{$2}$0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet sem "setminus" iA
\setminus
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{ $1 \\} $0
endsnippet

context "math()"
snippet zo "zero one" wA
\\{0, 1\\}$0
endsnippet


context "math()"
snippet || "mid" iA
\\mid 
endsnippet

context "math()"
snippet :: "colon" iA
 \colon 
endsnippet



context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet c= "subseteq" Ai
\subseteq 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " wA
\in 
endsnippet

context "math()"
snippet Cup "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet Cap "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\varnothing
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet cases "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet Re "Re" iA
\mathrm{Re}
endsnippet

context "math()"
snippet Im "Im" iA
\mathrm{Im}
endsnippet

context "env('itemize')"
snippet - "item" biA
\item
endsnippet

context "env('enumerate')"
snippet - "item" biA
\item
endsnippet

context "env('description')"
snippet - "item" biA
\item[$1] $0
endsnippet


